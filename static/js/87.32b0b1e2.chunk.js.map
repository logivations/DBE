{"version":3,"file":"static/js/87.32b0b1e2.chunk.js","mappings":"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","sources":["constants/FiltersConstants.ts","constants/ModalsTypes.ts","constants/userParamsSettingsConstants.ts","context/DbeTableDataContext.tsx","constants/DataGridConstants.ts","hooks/useThemes/index.ts","utils/settingsUtils.ts","hooks/useFilters.ts","hooks/useHiddenColumns.ts","hooks/useSorting.ts","hooks/useTableInstance.ts","hooks/useDefaultSettings.ts","hooks/userParamsSettings/useFilterSetting.ts","hooks/userParamsSettings/useSortingSetting.ts","hooks/userParamsSettings/useHiddenColumnsSetting.ts","hooks/userParamsSettings/useSettingHooks.ts","hooks/useComparingFilter.ts","hooks/useCellPreparing.ts","hooks/useSettings.ts","hooks/useProxiedFiltersForSaving.ts","hooks/useHelpLink.ts","../node_modules/devextreme/esm/data/data_source.js"],"sourcesContent":["/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nimport translate from '../i18n/localization';\n\nexport const enum FilterActions {\n\tADD_EDIT_FILTER = 'AddEditFilter',\n\tUNFILTER = 'Unfilter',\n}\n\nexport const enum SortingActions {\n\tADD_EDIT_FILTER = 'AddEditFilter',\n\tREMOVE_SORTING = 'RemoveSorting',\n}\n\nexport const enum HiddenColumnActions {\n\tADD_EDIT_FILTER = 'AddEditFilter',\n\tSHOW_HIDDEN_COLUMNS = 'ShowHiddenColumns',\n}\n\nexport const filtersSplit = [\n\t{\n\t\ttext: translate('MY_FILTERS'),\n\t\tvalue: 'my_filters',\n\t\townerUserFilters: true,\n\t},\n\t{\n\t\ttext: translate('OTHER_FILTERS'),\n\t\tvalue: 'other_filters',\n\t\townerUserFilters: false,\n\t},\n];\n\nexport const NO_FILTER = 'no_filter';\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nenum ModalsTypes {\n\tTABLE_ACTION_MODAL = 'TableActionModal',\n\tSETTINGS_MODAL = 'SettingsModal',\n\tIMPORT_MODAL = 'ImportModal',\n\tEXPORT_MODAL = 'ExportModal',\n\n\tUSER_PARAMS_SETTINGS_MODAL = 'UserParamsSettingsModal',\n\tADD_NEW_SETTINGS_MODAL = 'AddNewSettingsModal',\n\tEDIT_SETTING_MODAL = 'EditSettingModal',\n\n\tLINK_WITH_FILTER = 'LinkWithFilter',\n\n\tMASSIVE_UPDATE_MODAL = 'MassiveUpdateModal',\n\tSCREEN_BUILDER_CONFIG = 'ScreenBuilderConfig',\n\tCHILD_PARENT_TABLE_MODAL = 'ChildParentTableModal',\n\n\tADD_NEW_ROW_MODAL = 'AddNewRowModal',\n\tCLONE_SELECTED_ROWS_MODAL = 'CloneSelectedRowsModal',\n\tCOMPARE_TABLES_PARAMETERS_MODAL = 'CompareTablesParametersModal',\n\tMERGE_ROWS_MODAL = 'MergeRowsModal',\n\n\tRECALCULATE_REPORT_DATA = 'RecalculateReportData',\n\tSELECTION_FOR_FILTER_MODAL = 'SelectionForFilterModal',\n}\n\nexport enum BuildersTypes {\n\tFILTER_BUILDER = 'FilterBuilder',\n\tSORTING_BUILDER = 'SortingBuilder',\n\tHIDDEN_COLUMNS_BUILDER = 'HiddenColumnsBuilder',\n}\n\nexport default ModalsTypes;\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nexport const enum TypeOfUserParamSettings {\n\tFILTER_SETTINGS = 'FilterSettings',\n\tSORTING_SETTING = 'SortingSetting',\n\tHIDDEN_COLUMNS_SETTING = 'HiddenColumnsSetting',\n}\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2021\n ******************************************************************************/\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport TableInstanceManager from '../services/TableInstanceManager/TableInstanceManager';\nimport { useThemes } from '../hooks';\n\nexport interface IDbeTableDataContext {\n\ttableInstanceManager: TableInstanceManager;\n}\n\nexport const DbeTableDataContext = React.createContext<IDbeTableDataContext>({\n\ttableInstanceManager: new TableInstanceManager(),\n});\n\ninterface IContextProps {\n\tchildren: JSX.Element[] | JSX.Element;\n}\n\nexport const DbeTableDataContextProvider = ({ children }: IContextProps) => {\n\tconst [tableInstanceManager, setTableInstanceManager] = useState<TableInstanceManager>(null);\n\tconst { applyBaseTheme } = useThemes();\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\tapplyBaseTheme();\n\t\t\tdocument.body.setAttribute('id', 'dbe-app');\n\t\t\tconst tableInstanceManager = new TableInstanceManager();\n\t\t\tawait tableInstanceManager.createInstance();\n\t\t\tsetTableInstanceManager(tableInstanceManager);\n\t\t})();\n\t}, []);\n\treturn <DbeTableDataContext.Provider value={{ tableInstanceManager }}>{children}</DbeTableDataContext.Provider>;\n};\n\nconst useDbeTableDataContext = () => useContext(DbeTableDataContext);\n\nexport default useDbeTableDataContext;\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nenum RowTypes {\n\tFILTER = 'filter',\n\tHEADER = 'header',\n\tDATA = 'data',\n}\n\nenum ValidationTypes {\n\tASYNC = 'async',\n\tREQUIRED = 'required',\n\tNUMERIC = 'numeric',\n\tSTRING_LENGTH = 'stringLength',\n\tCUSTOM = 'custom',\n}\n\nenum CssClasses {\n\tINVALID_CELL = 'dx-datagrid-invalid',\n}\n\nexport { RowTypes, CssClasses, ValidationTypes };\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nimport { useCallback, useMemo } from 'react';\nimport themes from 'devextreme/ui/themes';\n\nconst useThemes = () => {\n\tconst themeFileName = useMemo(() => ({ dark: 'dark.theme', light: 'light.theme' }), []);\n\tconst themeCssClass = useMemo(() => ({ dark: 'theme-dark', light: 'theme-light' }), []);\n\tconst themeLocalStorageName = useMemo(() => ({ dark: 'dark', light: 'light' }), []);\n\n\tconst changeTheme = useCallback(() => {\n\t\tconst isDarkTheme = themes.current() === themeFileName.dark;\n\t\tthemes.current(isDarkTheme ? themeFileName.light : themeFileName.dark);\n\t\tdocument.body.classList.replace(\n\t\t\tisDarkTheme ? themeCssClass.dark : themeCssClass.light,\n\t\t\tisDarkTheme ? themeCssClass.light : themeCssClass.dark,\n\t\t);\n\t\tlocalStorage.setItem('themeName', isDarkTheme ? themeLocalStorageName.light : themeLocalStorageName.dark);\n\t}, []);\n\n\tconst applyBaseTheme = useCallback(() => {\n\t\tconst localStorageTheme = localStorage.getItem('themeName');\n\t\tconst isDarkTheme = localStorageTheme === themeLocalStorageName.dark;\n\t\tif (localStorageTheme && themes.current() !== localStorageTheme) {\n\t\t\tthemes.current(isDarkTheme ? themeFileName.dark : themeFileName.light);\n\t\t}\n\t\tdocument.body.classList.add(isDarkTheme ? themeCssClass.dark : themeCssClass.light);\n\t}, []);\n\n\treturn { changeTheme, applyBaseTheme };\n};\n\nexport default useThemes;\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nimport DataSource from 'devextreme/data/data_source';\n\nexport const createGroupedItemsForSelectBox = (elements: any[]) => {\n\treturn new DataSource({\n\t\tstore: {\n\t\t\ttype: 'array',\n\t\t\tdata: elements,\n\t\t\tkey: 'settingId',\n\t\t},\n\t\tgroup: 'category',\n\t});\n};\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nimport { useMemo } from 'react';\nimport translate from '../i18n/localization';\nimport { createGroupedItemsForSelectBox } from '../utils/settingsUtils';\nimport TableInstance from '../services/TableInstanceManager/TableInstance';\nimport { FilterSetting } from '../models/Classes';\n\nconst useFilters = (tableInstance: TableInstance) => {\n\treturn useMemo(() => {\n\t\tconst filtersSettings: FilterSetting[] = tableInstance.getFilters();\n\n\t\tconst { publicFiltersForSelectBox, privateFiltersForSelectBox } = filtersSettings.reduce(\n\t\t\t(acc, filterSettings) => {\n\t\t\t\tfilterSettings.isPublic\n\t\t\t\t\t? acc.publicFiltersForSelectBox.push({ ...filterSettings, category: translate('PUBLIC_FILTERS') })\n\t\t\t\t\t: acc.privateFiltersForSelectBox.push({\n\t\t\t\t\t\t\t...filterSettings,\n\t\t\t\t\t\t\tcategory: translate('PRIVATE_FILTERS'),\n\t\t\t\t\t  });\n\t\t\t\treturn acc;\n\t\t\t},\n\t\t\t{ publicFiltersForSelectBox: [], privateFiltersForSelectBox: [] },\n\t\t);\n\n\t\tconst noFilter = {\n\t\t\tsettingName: translate('NO_FILTER_APPLIED'),\n\t\t\tcategory: '',\n\t\t\tsettingId: 'no_filter',\n\t\t};\n\n\t\tconst groupedFilters = createGroupedItemsForSelectBox([\n\t\t\tnoFilter,\n\t\t\t...publicFiltersForSelectBox,\n\t\t\t...privateFiltersForSelectBox,\n\t\t]);\n\t\treturn [groupedFilters];\n\t}, []);\n};\n\nexport default useFilters;\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nimport { useMemo } from 'react';\nimport translate from '../i18n/localization';\nimport { createGroupedItemsForSelectBox } from '../utils/settingsUtils';\nimport TableInstance from '../services/TableInstanceManager/TableInstance';\nimport DataSource from 'devextreme/data/data_source';\nimport { NO_FILTER } from '../constants/FiltersConstants';\nimport { HiddenColumnSetting } from '../models/Classes';\n\nconst useHiddenColumns = (tableInstance: TableInstance) => {\n\treturn useMemo(() => {\n\t\tconst hiddenColumnsSettings: HiddenColumnSetting[] = tableInstance.getHiddenColumns();\n\n\t\tconst publicHiddenColumns = hiddenColumnsSettings.filter(({ isPublic }) => isPublic);\n\t\tconst privateHiddenColumns = hiddenColumnsSettings.filter(({ isPublic }) => !isPublic);\n\n\t\tconst publicHiddenColumnsForSelectBox = publicHiddenColumns.map((filter) => {\n\t\t\treturn { ...filter, category: translate('PUBLIC_FILTERS') };\n\t\t});\n\t\tconst privateHiddenColumnsForSelectBox = privateHiddenColumns.map((filter) => {\n\t\t\treturn { ...filter, category: translate('PRIVATE_FILTERS') };\n\t\t});\n\n\t\tconst noHiddenColumn = {\n\t\t\tsettingName: translate('NO_FILTER_APPLIED'),\n\t\t\tcategory: '',\n\t\t\tsettingId: NO_FILTER,\n\t\t};\n\n\t\tconst groupedHiddenColumns: DataSource = createGroupedItemsForSelectBox([\n\t\t\tnoHiddenColumn,\n\t\t\t...publicHiddenColumnsForSelectBox,\n\t\t\t...privateHiddenColumnsForSelectBox,\n\t\t]);\n\t\treturn [groupedHiddenColumns];\n\t}, []);\n};\n\nexport default useHiddenColumns;\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nimport { useMemo } from 'react';\nimport translate from '../i18n/localization';\nimport { createGroupedItemsForSelectBox } from '../utils/settingsUtils';\nimport { NO_FILTER } from '../constants/FiltersConstants';\n\nconst useSorting = (tableInstance) => {\n\treturn useMemo(() => {\n\t\tconst sortOrderSettings = tableInstance.getSortOrderSettings();\n\n\t\tconst publicSortOrder = sortOrderSettings.filter(({ isPublic }) => isPublic);\n\t\tconst privateSortOrder = sortOrderSettings.filter(({ isPublic }) => !isPublic);\n\n\t\tconst publicSortOrderSettingsForSelectBox = publicSortOrder.map((filter) => {\n\t\t\treturn { ...filter, category: translate('PUBLIC_FILTERS') };\n\t\t});\n\t\tconst privateSortOrderSettingsForSelectBox = privateSortOrder.map((filter) => {\n\t\t\treturn { ...filter, category: translate('PRIVATE_FILTERS') };\n\t\t});\n\n\t\tconst noSortOrderSetting = {\n\t\t\tsettingName: translate('NO_FILTER_APPLIED'),\n\t\t\tsettingId: NO_FILTER,\n\t\t\tcategory: '',\n\t\t};\n\n\t\tconst groupedSorting = createGroupedItemsForSelectBox([\n\t\t\tnoSortOrderSetting,\n\t\t\t...publicSortOrderSettingsForSelectBox,\n\t\t\t...privateSortOrderSettingsForSelectBox,\n\t\t]);\n\n\t\treturn [groupedSorting];\n\t}, []);\n};\n\nexport default useSorting;\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nimport useDbeTableDataContext, { IDbeTableDataContext } from '../context/DbeTableDataContext';\nimport { useMemo } from 'react';\n\nconst useTableInstance = (tableName) => {\n\tconst { tableInstanceManager }: IDbeTableDataContext = useDbeTableDataContext();\n\tconst tableInstance = useMemo(() => {\n\t\tif (tableInstanceManager) {\n\t\t\treturn tableInstanceManager.getTableInstance(tableName);\n\t\t}\n\t}, [tableInstanceManager, tableName]);\n\treturn { tableInstanceManager, tableInstance };\n};\n\nexport default useTableInstance;\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nimport { useCallback, useEffect, useMemo } from 'react';\nimport { SortSetting } from '../models/Classes';\nimport { IDxGridSettings } from '../helpers/DxGridSettingsService';\nimport TableInstanceManager from '../services/TableInstanceManager/TableInstanceManager';\nimport TableInstance from '../services/TableInstanceManager/TableInstance';\nimport ForeignButtonProxy from '../services/ForeignButtonManager/ForeignButtonProxy';\n\nconst useDefaultSettings = (\n\ttableInstance: TableInstance,\n\tdbeDxGridRef,\n\ttableName,\n\ttableType,\n\tinitialFilter,\n\ttableInstanceManager,\n) => {\n\tconst applyFiltersOnInit = useCallback(\n\t\t(dxDbeGrid) => {\n\t\t\tif (initialFilter) {\n\t\t\t\tdxDbeGrid.filter(initialFilter);\n\t\t\t} else if (tableInstance?.urlFilter) {\n\t\t\t\tdxDbeGrid.filter(tableInstance.urlFilter);\n\t\t\t} else if (tableInstance?.defaultFilter) {\n\t\t\t\tdxDbeGrid.filter(tableInstance.defaultFilter);\n\t\t\t}\n\t\t},\n\t\t[tableInstance, initialFilter],\n\t);\n\n\tconst customizeColumns: any = useCallback(\n\t\t(columns) => {\n\t\t\tconst defaultHiddenColumn = tableInstance.defaultHiddenColumn;\n\t\t\tconst dxGridCommonSettings = tableInstance.tableRelatedUserParameters.dxGridCommonSettings;\n\t\t\tcolumns.forEach((column) => {\n\t\t\t\tconst commonSetting = dxGridCommonSettings.getByColumnName(column.dataField);\n\t\t\t\tif (commonSetting) {\n\t\t\t\t\tObject.assign(column, commonSetting);\n\t\t\t\t}\n\t\t\t\tif (defaultHiddenColumn) {\n\t\t\t\t\tcolumn.visible = !defaultHiddenColumn.setting.includes(column.dataField);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t[tableInstance],\n\t);\n\n\tconst onInitialized = useCallback(\n\t\t({ component }) => {\n\t\t\tapplyFiltersOnInit(component);\n\t\t\tif (tableType === TableInstanceManager.ORIGINAL_TABLE) {\n\t\t\t\ttableInstanceManager.initializeEventForOriginalTable(component);\n\t\t\t}\n\t\t},\n\t\t[applyFiltersOnInit, tableInstanceManager, tableType],\n\t);\n\n\tuseEffect(() => {\n\t\tif (tableInstance && dbeDxGridRef?.current) {\n\t\t\tconst gridInstance = dbeDxGridRef.current.instance;\n\t\t\tconst urlFilter = tableInstance.urlFilter;\n\t\t\tif (urlFilter) {\n\t\t\t\tgridInstance.filter(urlFilter);\n\t\t\t} else {\n\t\t\t\tconst defaultFilter = tableInstance.defaultFilter;\n\t\t\t\tdefaultFilter && gridInstance.filter(defaultFilter);\n\t\t\t}\n\n\t\t\tconst defaultSortOrder = tableInstance.defaultSortOrder;\n\t\t\tdefaultSortOrder && SortSetting.applySortingSetting(defaultSortOrder, gridInstance);\n\t\t}\n\n\t\tif (tableType === TableInstanceManager.ORIGINAL_TABLE && tableInstance) {\n\t\t\tdocument.title = tableInstance.getTabTitle();\n\t\t}\n\t}, [tableInstance, dbeDxGridRef]);\n\n\tuseEffect(() => {\n\t\tif (tableInstance && dbeDxGridRef?.current) {\n\t\t\tif (tableInstance.tableRelatedUserParameters.isAutoRefresh) {\n\t\t\t\ttableInstance.setInterval(() => {\n\t\t\t\t\tnew ForeignButtonProxy().clearCache();\n\t\t\t\t\tdbeDxGridRef.current.instance.refresh(true);\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tdbeDxGridRef.current.instance.repaint();\n\t\t\t\t\t}, 1000);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\ttableInstance.clearInterval();\n\t\t\t}\n\t\t}\n\t}, [dbeDxGridRef, dbeDxGridRef.current, tableInstance]);\n\n\tconst gridCommonSettings = useMemo(() => {\n\t\tif (tableInstance) {\n\t\t\treturn tableInstance.tableRelatedUserParameters.getDxGridCommonSettings();\n\t\t}\n\t\treturn null;\n\t}, [tableInstance]);\n\n\tconst onOptionChanged: any = useCallback(\n\t\t(data) => {\n\t\t\tif (gridCommonSettings) {\n\t\t\t\tgridCommonSettings.onSettingsChanged(\n\t\t\t\t\tdata as IDxGridSettings,\n\t\t\t\t\t() => dbeDxGridRef.current.instance,\n\t\t\t\t\ttableInstance,\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\t[gridCommonSettings, tableInstance],\n\t);\n\n\t//TODO: fix error in DataGrid for selected rows\n\t// const selectedRowKeys: [] = useMemo(() => {\n\t// \tif (gridCommonSettings) {\n\t// \t\tconst selectedKeys = gridCommonSettings.getByParamName(AllowedSettingNames.selectedRowKeys);\n\t// \t\treturn selectedKeys.map(Object.values).flat() || [];\n\t// \t}\n\t// \treturn [];\n\t// }, [gridCommonSettings]);\n\n\treturn [customizeColumns, onOptionChanged, onInitialized];\n};\nexport default useDefaultSettings;\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nimport { BuildersTypes } from '../../constants/ModalsTypes';\nimport { FilterSetting } from '../../models/Classes';\nimport translate from '../../i18n/localization';\nimport { useMemo } from 'react';\nimport ButtonNames from '../../services/ToolbarPanelManager/ButtonNames';\n\nconst useFilterSetting = (tableInstance, dbeDxGridRef, ownerUserFilters = false) => {\n\treturn useMemo(() => {\n\t\treturn {\n\t\t\tbuttonName: ButtonNames.filterSettingButton,\n\t\t\tsettingElements: ownerUserFilters ? tableInstance.getFilters() : tableInstance.getOtherFilters(),\n\t\t\taddSetting: (newFilter) => {\n\t\t\t\treturn tableInstance.tableRelatedUserParameters.addFilter(newFilter);\n\t\t\t},\n\t\t\teditSetting: (filterSetting) => tableInstance.tableRelatedUserParameters.editFilter(filterSetting),\n\t\t\tdeleteSetting: (filter) => tableInstance.tableRelatedUserParameters.deleteFilterSetting(filter),\n\t\t\tbuilderKey: BuildersTypes.FILTER_BUILDER,\n\t\t\tsetSelectedSetting: (selectedFilter) => {\n\t\t\t\treturn tableInstance.tableRelatedUserParameters.setSelectedFilter(selectedFilter);\n\t\t\t},\n\t\t\tshareUnshareSetting: (objectId, isShare) => {\n\t\t\t\treturn tableInstance.tableRelatedUserParameters.shareUnshareFilterSetting(objectId, isShare);\n\t\t\t},\n\t\t\tcheckSelectedSetting: (objectId) => {\n\t\t\t\treturn tableInstance.selectedFilter && tableInstance.selectedFilter.settingId === objectId;\n\t\t\t},\n\t\t\tcreateNewSetting: (settingName, isPublic, objectId, setting) =>\n\t\t\t\tFilterSetting.createNewFilterSetting(settingName, isPublic, objectId, setting),\n\t\t\ttitle: translate('FILTER'),\n\t\t\tgetTheBiggestObjectId: () => tableInstance.tableRelatedUserParameters.getTheBiggestFilterObjectId(),\n\t\t\tisNameExists: (name) => tableInstance.isFilterNameExistsFilters(name),\n\t\t\tgetNextSettingName: () => {\n\t\t\t\treturn tableInstance.tableRelatedUserParameters.getLastFilterSettingCount() + 1;\n\t\t\t},\n\t\t\tupdateToolbarButton: (toolbarPanelDispatch, filterSetting) => {\n\t\t\t\ttoolbarPanelDispatch({\n\t\t\t\t\ttype: 'UPDATE_ITEMS',\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\titems: [filterSetting].map((filter) => ({ ...filter })),\n\t\t\t\t\t\tbuttonName: ButtonNames.filterSettingButton,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\ttoolbarPanelDispatch({\n\t\t\t\t\ttype: 'UPDATE_SELECTED_ITEM_KEY',\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tselectedItemKey: filterSetting?.settingId || null,\n\t\t\t\t\t\tbuttonName: ButtonNames.filterSettingButton,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tapplySettingToDataGrid: (filterSetting) => {\n\t\t\t\tdbeDxGridRef.filter(filterSetting);\n\t\t\t},\n\t\t};\n\t}, [ownerUserFilters]);\n};\n\nexport default useFilterSetting;\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nimport { BuildersTypes } from '../../constants/ModalsTypes';\nimport { SortSetting } from '../../models/Classes';\nimport translate from '../../i18n/localization';\nimport { useMemo } from 'react';\nimport ButtonNames from '../../services/ToolbarPanelManager/ButtonNames';\n\nconst useSortingSetting = (tableInstance, dbeDxGridRef, ownerUserFilters = false) => {\n\treturn useMemo(() => {\n\t\treturn {\n\t\t\tbuttonName: ButtonNames.tableSortButton,\n\t\t\tsettingElements: ownerUserFilters\n\t\t\t\t? tableInstance.getSortOrderSettings()\n\t\t\t\t: tableInstance.getOtherSortOrderSettings(),\n\t\t\teditSetting: (sortSetting) => tableInstance.tableRelatedUserParameters.editSortingSetting(sortSetting),\n\t\t\taddSetting: (sortSetting) => tableInstance.tableRelatedUserParameters.addSortOrder(sortSetting),\n\t\t\tdeleteSetting: (sortSetting) => tableInstance.tableRelatedUserParameters.deleteSortingSetting(sortSetting),\n\t\t\tbuilderKey: BuildersTypes.SORTING_BUILDER,\n\t\t\tsetSelectedSetting: (selectedSortSetting) => {\n\t\t\t\treturn tableInstance.tableRelatedUserParameters.setSelectedSortOrder(selectedSortSetting);\n\t\t\t},\n\t\t\tshareUnshareSetting: (objectId, isShare) => {\n\t\t\t\treturn tableInstance.tableRelatedUserParameters.shareUnshareSortingSetting(objectId, isShare);\n\t\t\t},\n\t\t\tcheckSelectedSetting: (objectId) => {\n\t\t\t\treturn tableInstance.selectedSortOrder && tableInstance.selectedSortOrder.settingId === objectId;\n\t\t\t},\n\t\t\tcreateNewSetting: (settingName, isPublic, objectId, setting) =>\n\t\t\t\tSortSetting.createNewSortOrder(settingName, isPublic, objectId, setting),\n\t\t\ttitle: translate('TABLE_SORTING'),\n\t\t\tgetTheBiggestObjectId: () => tableInstance.tableRelatedUserParameters.getTheBiggestSortOrderObjectId(),\n\t\t\tisNameExists: (name) => tableInstance.isFilterNameExistsSortOrderSettings(name),\n\t\t\tgetNextSettingName: () => {\n\t\t\t\treturn tableInstance.tableRelatedUserParameters.getLastSortOrderSettingCount() + 1;\n\t\t\t},\n\t\t\tupdateToolbarButton: (toolbarPanelDispatch, filterSetting) => {\n\t\t\t\ttoolbarPanelDispatch({\n\t\t\t\t\ttype: 'UPDATE_ITEMS',\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\titems: [filterSetting].map((filter) => ({ ...filter })),\n\t\t\t\t\t\tbuttonName: ButtonNames.tableSortButton,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\ttoolbarPanelDispatch({\n\t\t\t\t\ttype: 'UPDATE_SELECTED_ITEM_KEY',\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tselectedItemKey: filterSetting?.settingId || null,\n\t\t\t\t\t\tbuttonName: ButtonNames.tableSortButton,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t},\n\t\t\tapplySettingToDataGrid: (sortingSetting) => {\n\t\t\t\tSortSetting.applySortingSetting(sortingSetting, dbeDxGridRef);\n\t\t\t},\n\t\t};\n\t}, [ownerUserFilters]);\n};\n\nexport default useSortingSetting;\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nimport { HiddenColumnSetting, TableRelatedUserParameters } from '../../models/Classes';\nimport translate from '../../i18n/localization';\nimport { BuildersTypes } from '../../constants/ModalsTypes';\nimport { useMemo } from 'react';\nimport ButtonNames from '../../services/ToolbarPanelManager/ButtonNames';\n\nconst useHiddenColumnsSetting = (tableInstance, dbeDxGridRef, ownerUserFilters = false) => {\n\treturn useMemo(() => {\n\t\treturn {\n\t\t\tbuttonName: ButtonNames.hiddenColumnSettingButton,\n\t\t\tsettingElements: ownerUserFilters ? tableInstance.getHiddenColumns() : tableInstance.getOtherHiddenColumn(),\n\t\t\teditSetting: (hiddenColumnFilter) =>\n\t\t\t\ttableInstance.tableRelatedUserParameters.editHiddenColumnsSetting(hiddenColumnFilter),\n\t\t\taddSetting: (hiddenColumnFilter) =>\n\t\t\t\ttableInstance.tableRelatedUserParameters.addHiddenColumnSetting(hiddenColumnFilter),\n\t\t\tdeleteSetting: (hiddenColumnFilter) =>\n\t\t\t\ttableInstance.tableRelatedUserParameters.deleteHiddenColumnsSetting(hiddenColumnFilter),\n\t\t\tbuilderKey: BuildersTypes.HIDDEN_COLUMNS_BUILDER,\n\t\t\tsetSelectedSetting: (hiddenColumnFilter): TableRelatedUserParameters => {\n\t\t\t\treturn tableInstance.tableRelatedUserParameters.setSelectedHiddenColumnFilter(hiddenColumnFilter);\n\t\t\t},\n\t\t\tshareUnshareSetting: (objectId, isShare): void => {\n\t\t\t\treturn tableInstance.tableRelatedUserParameters.shareUnshareHiddenColumnSetting(objectId, isShare);\n\t\t\t},\n\t\t\tcheckSelectedSetting: (objectId): boolean => {\n\t\t\t\treturn (\n\t\t\t\t\ttableInstance.selectedHiddenColumnFilter &&\n\t\t\t\t\ttableInstance.selectedHiddenColumnFilter.settingId === objectId\n\t\t\t\t);\n\t\t\t},\n\t\t\tcreateNewSetting: (settingName, isPublic, objectId, setting) =>\n\t\t\t\tHiddenColumnSetting.createNewHiddenColumnSetting(settingName, isPublic, objectId, setting),\n\t\t\ttitle: translate('HIDDEN_COLUMNS_FILTER'),\n\t\t\tgetTheBiggestObjectId: () => tableInstance.tableRelatedUserParameters.getTheBiggestHiddenColumnObjectId(),\n\t\t\tisNameExists: (name) => tableInstance.isFilterNameExistsHiddenColumn(name),\n\t\t\tgetNextSettingName: () => {\n\t\t\t\treturn tableInstance.tableRelatedUserParameters.getLastHiddenColumnSettingCount() + 1;\n\t\t\t},\n\t\t\tupdateToolbarButton: (toolbarPanelDispatch, filterSetting) => {\n\t\t\t\ttoolbarPanelDispatch({\n\t\t\t\t\ttype: 'UPDATE_ITEMS',\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\titems: [filterSetting].map((filter) => ({ ...filter })),\n\t\t\t\t\t\tbuttonName: ButtonNames.hiddenColumnSettingButton,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\ttoolbarPanelDispatch({\n\t\t\t\t\ttype: 'UPDATE_SELECTED_ITEM_KEY',\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tselectedItemKey: filterSetting?.settingId || null,\n\t\t\t\t\t\tbuttonName: ButtonNames.hiddenColumnSettingButton,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t},\n\t\t\tapplySettingToDataGrid: (hiddenColumns) => {\n\t\t\t\tdbeDxGridRef.option('customizeColumns', (columns) => {\n\t\t\t\t\tcolumns.forEach((column) => {\n\t\t\t\t\t\tcolumn.visible = !hiddenColumns.setting.includes(column.dataField);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t},\n\t\t};\n\t}, [ownerUserFilters]);\n};\n\nexport default useHiddenColumnsSetting;\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nimport { useMemo } from 'react';\nimport useFilterSetting from './useFilterSetting';\nimport useSortingSetting from './useSortingSetting';\nimport useHiddenColumnsSetting from './useHiddenColumnsSetting';\nimport { TypeOfUserParamSettings } from '../../constants/userParamsSettingsConstants';\n\nconst useSettingHooks = (type) => {\n\treturn useMemo(() => {\n\t\tswitch (type) {\n\t\t\tcase TypeOfUserParamSettings.FILTER_SETTINGS:\n\t\t\t\treturn useFilterSetting;\n\t\t\tcase TypeOfUserParamSettings.SORTING_SETTING:\n\t\t\t\treturn useSortingSetting;\n\t\t\tcase TypeOfUserParamSettings.HIDDEN_COLUMNS_SETTING:\n\t\t\t\treturn useHiddenColumnsSetting;\n\t\t}\n\t}, [type]);\n};\n\nexport default useSettingHooks;\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nimport { useCallback } from 'react';\n\nconst useComparingFilter = (setSelectedFilter) => {\n\tconst onValueChange = useCallback((e) => {\n\t\tconst model = e.component._model;\n\t\tconst [firstFilter, , secondFilter] = model;\n\t\tif (firstFilter[0] === secondFilter[0] && firstFilter[1] === secondFilter[1]) {\n\t\t\tsetSelectedFilter(() => e.value);\n\t\t}\n\t}, []);\n\n\tconst onContentReady = useCallback((e) => {\n\t\tconst model = e.component._model;\n\t\tconst [firstFilter, , secondFilter] = model;\n\t\tif (firstFilter[0] !== secondFilter[0] || firstFilter[1] !== secondFilter[1]) {\n\t\t\tsetSelectedFilter([model[0], 'and', model[0]]);\n\t\t}\n\t}, []);\n\n\treturn [onValueChange, onContentReady];\n};\n\nexport default useComparingFilter;\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nimport {useCallback} from 'react';\nimport {CssClasses, RowTypes, ValidationTypes} from '../constants/DataGridConstants';\nimport {isDefined} from '../utils/utils';\nimport CompareTableDataModel from \"../services/TableDataModel/CompareTableDataModel\";\n\nconst useCellPreparing = (tableInstance) => {\n\tconst addInvalidCellClass = useCallback(({ cellElement }) => {\n\t\tcellElement.classList.add(CssClasses.INVALID_CELL);\n\t}, []);\n\tconst validateAllCells = useCallback((e) => {\n\t\tif (e.rowType === RowTypes.DATA && e.column.validationRules) {\n\t\t\te.column.validationRules.forEach((rule) => {\n\t\t\t\tswitch (rule.type) {\n\t\t\t\t\tcase ValidationTypes.ASYNC:\n\t\t\t\t\t\trule.validationCallback({ data: e.row.data, value: e.value }).then((res) => {\n\t\t\t\t\t\t\t!res && addInvalidCellClass(e);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ValidationTypes.REQUIRED:\n\t\t\t\t\t\t!isDefined(e.value) && addInvalidCellClass(e);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ValidationTypes.NUMERIC:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ValidationTypes.STRING_LENGTH:\n\t\t\t\t\t\tif (rule.max) {\n\t\t\t\t\t\t\t(e.value && e.value.length) > rule.max && addInvalidCellClass(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ValidationTypes.CUSTOM:\n\t\t\t\t\t\t!rule.validationCallback({ value: e.value }) && addInvalidCellClass(e);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, []);\n\n\tconst highlightCellsAfterComparing = useCallback((e, tableInstance) => {\n\t\tif (e.rowType === RowTypes.DATA && e.column.dataField) {\n\t\t\tconst color = tableInstance\n\t\t\t\t.getTableDataModel()\n\t\t\t\t.getCompareTableResultColorCell(e.row.dataIndex, e.column.dataField);\n\t\t\tcolor && (e.cellElement.style.backgroundColor = color);\n\t\t}\n\t}, []);\n\n\treturn useCallback(\n\t\t(e) => {\n\t\t\tvalidateAllCells(e);\n\t\t\tif (tableInstance && tableInstance.getTableDataModel() instanceof CompareTableDataModel) {\n\t\t\t\thighlightCellsAfterComparing(e, tableInstance);\n\t\t\t}\n\t\t},\n\t\t[tableInstance],\n\t);\n};\n\nexport default useCellPreparing;\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nimport { useCallback } from 'react';\nimport ButtonNames from '../services/ToolbarPanelManager/ButtonNames';\nimport sortSetting from '../models/Classes/SortSetting';\nimport TableInstance from '../services/TableInstanceManager/TableInstance';\nimport ForeignButtonProxy from '../services/ForeignButtonManager/ForeignButtonProxy';\n\nconst useSettings = (dbeDxGridInstance, tableInstance: TableInstance) => {\n\tconst toolbarPanelDispatch = useCallback(\n\t\t(...args) => {\n\t\t\treturn tableInstance.toolbarPanelButtonManager.dispatchForToolbar(...args);\n\t\t},\n\t\t[tableInstance, tableInstance.toolbarPanelButtonManager],\n\t);\n\n\treturn useCallback((params) => {\n\t\tconst { defaultFilter, defaultHiddenColumnFilter, defaultSortOrder } = params;\n\t\ttoolbarPanelDispatch({\n\t\t\ttype: 'UPDATE_SELECTED_ITEM_KEY',\n\t\t\tpayload: { selectedItemKey: defaultFilter?.settingId || null, buttonName: ButtonNames.filterSettingButton },\n\t\t});\n\t\ttoolbarPanelDispatch({\n\t\t\ttype: 'UPDATE_SELECTED_ITEM_KEY',\n\t\t\tpayload: { selectedItemKey: defaultSortOrder?.settingId || null, buttonName: ButtonNames.tableSortButton },\n\t\t});\n\t\ttoolbarPanelDispatch({\n\t\t\ttype: 'UPDATE_SELECTED_ITEM_KEY',\n\t\t\tpayload: {\n\t\t\t\tselectedItemKey: defaultHiddenColumnFilter?.settingId || null,\n\t\t\t\tbuttonName: ButtonNames.hiddenColumnSettingButton,\n\t\t\t},\n\t\t});\n\n\t\tdbeDxGridInstance.filter(defaultFilter || null);\n\t\tsortSetting.applySortingSetting(defaultSortOrder || null, dbeDxGridInstance);\n\t\tdocument.title = tableInstance.getTabTitle(params['tabTitle']);\n\n\t\tdbeDxGridInstance.option('customizeColumns', (columns) => {\n\t\t\tcolumns.forEach((column) => {\n\t\t\t\tcolumn.visible = defaultHiddenColumnFilter\n\t\t\t\t\t? !defaultHiddenColumnFilter.setting.includes(column.dataField)\n\t\t\t\t\t: true;\n\t\t\t});\n\t\t});\n\t\tif (params.isAutoRefresh) {\n\t\t\ttableInstance.setInterval(() => {\n\t\t\t\tnew ForeignButtonProxy().clearCache();\n\t\t\t\tdbeDxGridInstance.refresh(true);\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tdbeDxGridInstance.repaint();\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t} else {\n\t\t\ttableInstance.clearInterval();\n\t\t}\n\n\t\tdbeDxGridInstance.option('pageSize', parseInt(params.pageSize, 10));\n\t\tdbeDxGridInstance.pageSize(parseInt(params.pageSize, 10));\n\t\tdbeDxGridInstance.repaint();\n\t}, []);\n};\n\nexport default useSettings;\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nimport { useCallback, useEffect, useState } from 'react';\n\nconst useProxiedFiltersForSaving = (tableInstance, settingElements, editSetting, shareUnshareSetting) => {\n\tconst [dataSource, setDataSource] = useState([]);\n\tconst setProxiedSettings = useCallback(\n\t\t(filters) => {\n\t\t\tconst res = (() => {\n\t\t\t\tif (Array.isArray(filters)) {\n\t\t\t\t\treturn filters;\n\t\t\t\t}\n\t\t\t\treturn filters(dataSource);\n\t\t\t})();\n\t\t\tconst proxiedSettingElements = res.map((settEl) => {\n\t\t\t\treturn new Proxy(settEl, {\n\t\t\t\t\tset(target, prop, val) {\n\t\t\t\t\t\ttarget[prop] = val;\n\t\t\t\t\t\tif (prop === 'isShared') {\n\t\t\t\t\t\t\tif (target.isShared) {\n\t\t\t\t\t\t\t\ttarget.originalWarehouseId = tableInstance.originalWarehouseId;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttarget.originalWarehouseId = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tshareUnshareSetting(target.objectId, target.isShared);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\teditSetting(target);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tsetDataSource(proxiedSettingElements);\n\t\t},\n\t\t[dataSource],\n\t);\n\n\tuseEffect(() => {\n\t\tsetProxiedSettings(settingElements);\n\t}, [settingElements]);\n\n\treturn [dataSource, setProxiedSettings];\n};\n\nexport default useProxiedFiltersForSaving;\n","/*******************************************************************************\n * (C) Copyright\n * Logivations GmbH, Munich 2010-2022\n ******************************************************************************/\n\nimport { useMemo } from 'react';\nimport { WarehouseTypeForHelp, WarehouseUiType } from '../models/Enums/Table';\nimport TableInstance from '../services/TableInstanceManager/TableInstance';\n\nconst useHelpLink = (tableInstance: TableInstance, link?: string) => {\n\tconst warehouseId = window['WAREHOUSE_ID'];\n\tconst uiType = useMemo(() => tableInstance.warehouseUiType, [tableInstance]);\n\tconst layoutTypeTopic = WarehouseTypeForHelp[WarehouseUiType[uiType]];\n\n\tconst helpLink = useMemo(() => {\n\t\tif (link) {\n\t\t\tconst [topic, section, subSection] = link.split('/');\n\t\t\tconst helpUrl = new URL(\n\t\t\t\t`${window.location.origin}${global.CONTEXT_PATH}/view/help/${layoutTypeTopic}/${topic || ''}/${section || ''}`,\n\t\t\t);\n\t\t\thelpUrl.searchParams.append('warehouseId', warehouseId.toString());\n\t\t\tsubSection && (helpUrl.hash = subSection);\n\t\t\treturn helpUrl;\n\t\t}\n\t}, [link]);\n\treturn [helpLink];\n};\n\nexport const useDbeActionsHelpLink = (uiType: number, dbeAction: string) => {\n\tconst warehouseId = window['WAREHOUSE_ID'];\n\tconst layoutTypeTopic = WarehouseTypeForHelp[WarehouseUiType[uiType]];\n\treturn useMemo(() => {\n\t\tconst dbeActionsLink = new URL(`${window.location.origin}`);\n\t\tdbeActionsLink.pathname = `${window['CONTEXT_PATH']}/view/help/${layoutTypeTopic}/direct-edit/dbe-actions`;\n\t\tdbeActionsLink.searchParams.append('warehouseId', warehouseId);\n\t\tdbeActionsLink.hash = dbeAction;\n\t\treturn dbeActionsLink;\n\t}, [uiType, dbeAction]);\n};\n\nexport default useHelpLink;\n","/**\r\n * DevExtreme (esm/data/data_source.js)\r\n * Version: 22.2.3\r\n * Build date: Mon Dec 05 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    DataSource\r\n} from \"./data_source/data_source\";\r\nexport default DataSource;\r\n"],"names":["FilterActions","SortingActions","HiddenColumnActions","filtersSplit","text","translate","value","ownerUserFilters","NO_FILTER","ModalsTypes","BuildersTypes","TypeOfUserParamSettings","DbeTableDataContext","React","tableInstanceManager","TableInstanceManager","DbeTableDataContextProvider","children","useState","setTableInstanceManager","applyBaseTheme","useThemes","useEffect","document","body","setAttribute","createInstance","Provider","useContext","RowTypes","ValidationTypes","CssClasses","themeFileName","useMemo","dark","light","themeCssClass","themeLocalStorageName","changeTheme","useCallback","isDarkTheme","themes","classList","replace","localStorage","setItem","localStorageTheme","getItem","add","createGroupedItemsForSelectBox","elements","DataSource","store","type","data","key","group","tableInstance","getFilters","reduce","acc","filterSettings","isPublic","publicFiltersForSelectBox","push","category","privateFiltersForSelectBox","noFilter","settingName","settingId","hiddenColumnsSettings","getHiddenColumns","publicHiddenColumns","filter","privateHiddenColumns","publicHiddenColumnsForSelectBox","map","privateHiddenColumnsForSelectBox","noHiddenColumn","sortOrderSettings","getSortOrderSettings","publicSortOrder","privateSortOrder","publicSortOrderSettingsForSelectBox","privateSortOrderSettingsForSelectBox","noSortOrderSetting","tableName","useDbeTableDataContext","getTableInstance","dbeDxGridRef","tableType","initialFilter","applyFiltersOnInit","dxDbeGrid","urlFilter","defaultFilter","customizeColumns","columns","defaultHiddenColumn","dxGridCommonSettings","tableRelatedUserParameters","forEach","column","commonSetting","getByColumnName","dataField","Object","assign","visible","setting","includes","onInitialized","component","initializeEventForOriginalTable","current","gridInstance","instance","defaultSortOrder","SortSetting","title","getTabTitle","isAutoRefresh","setInterval","ForeignButtonProxy","clearCache","refresh","setTimeout","repaint","clearInterval","gridCommonSettings","getDxGridCommonSettings","onSettingsChanged","buttonName","ButtonNames","settingElements","getOtherFilters","addSetting","newFilter","addFilter","editSetting","filterSetting","editFilter","deleteSetting","deleteFilterSetting","builderKey","setSelectedSetting","selectedFilter","setSelectedFilter","shareUnshareSetting","objectId","isShare","shareUnshareFilterSetting","checkSelectedSetting","createNewSetting","FilterSetting","getTheBiggestObjectId","getTheBiggestFilterObjectId","isNameExists","name","isFilterNameExistsFilters","getNextSettingName","getLastFilterSettingCount","updateToolbarButton","toolbarPanelDispatch","payload","items","selectedItemKey","applySettingToDataGrid","getOtherSortOrderSettings","sortSetting","editSortingSetting","addSortOrder","deleteSortingSetting","selectedSortSetting","setSelectedSortOrder","shareUnshareSortingSetting","selectedSortOrder","getTheBiggestSortOrderObjectId","isFilterNameExistsSortOrderSettings","getLastSortOrderSettingCount","sortingSetting","getOtherHiddenColumn","hiddenColumnFilter","editHiddenColumnsSetting","addHiddenColumnSetting","deleteHiddenColumnsSetting","setSelectedHiddenColumnFilter","shareUnshareHiddenColumnSetting","selectedHiddenColumnFilter","HiddenColumnSetting","getTheBiggestHiddenColumnObjectId","isFilterNameExistsHiddenColumn","getLastHiddenColumnSettingCount","hiddenColumns","option","useFilterSetting","useSortingSetting","useHiddenColumnsSetting","e","model","_model","firstFilter","secondFilter","addInvalidCellClass","cellElement","INVALID_CELL","validateAllCells","rowType","DATA","validationRules","rule","ASYNC","validationCallback","row","then","res","REQUIRED","isDefined","NUMERIC","STRING_LENGTH","max","length","CUSTOM","highlightCellsAfterComparing","color","getTableDataModel","getCompareTableResultColorCell","dataIndex","style","backgroundColor","CompareTableDataModel","dbeDxGridInstance","toolbarPanelButtonManager","dispatchForToolbar","params","defaultHiddenColumnFilter","parseInt","pageSize","dataSource","setDataSource","setProxiedSettings","filters","proxiedSettingElements","Array","isArray","settEl","Proxy","set","target","prop","val","isShared","originalWarehouseId","useDbeActionsHelpLink","uiType","dbeAction","warehouseId","window","layoutTypeTopic","WarehouseTypeForHelp","WarehouseUiType","dbeActionsLink","URL","location","origin","pathname","searchParams","append","hash","link","warehouseUiType","split","topic","section","subSection","helpUrl","global","CONTEXT_PATH","toString"],"sourceRoot":""}